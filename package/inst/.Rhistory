theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
ggplot(users)+
geom_histogram(aes(user_age,fill=user_gender),position="dodge")+
#facet_grid(~user_gender)+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
?ggmap
qmap('Australia',zoom=13)+
geom_point(data = users, aes(x = loc_lon, y = loc_lat), color="red", size=3, alpha=0.5)
qmap('Australia',zoom=13)+
geom_point(data = users, aes(x = longitude, y = latitude), color=user_gender, size=1, alpha=0.5)
)
qmap('Australia',zoom=13)+
geom_point(data = users, aes(x = longitude, y = latitude,fill=user_gender),  size=1, alpha=0.5)
)
qmap('Australia',zoom=10)+
geom_point(data = users, aes(x = longitude, y = latitude,fill=user_gender),  size=1, alpha=0.5)
qmap('Australia',zoom=6)+
geom_point(data = users, aes(x = longitude, y = latitude,fill=user_gender),  size=1, alpha=0.5)
qmap('Australia',zoom=4)+
geom_point(data = users, aes(x = longitude, y = latitude,fill=user_gender),  size=1, alpha=0.5)
sum(is.na(users$longitude))
sum(is.na(users$latitude))
sum(is.na(users$user_gender))
summary(users)
hist(users$latitude)
shiny::runApp()
shiny::runApp()
shiny::runApp()
qmap('Australia',zoom=1)+
geom_point(data = users, aes(x = longitude, y = latitude,fill=user_gender),  size=1, alpha=0.5)
qmap('Australia',zoom=2)+
geom_point(data = users, aes(x = longitude, y = latitude,fill=user_gender),  size=1, alpha=0.5)
qmap('Australia',zoom=2)+
geom_point(data = users, aes(x = longitude, y = latitude),color="red",  size=1, alpha=0.5)
qmap('Australia',zoom=1)+
geom_point(data = users, aes(x = longitude, y = latitude),color="red",  size=1, alpha=0.5)
qmap('',zoom=1)+
geom_point(data = users, aes(x = longitude, y = latitude),color="red",  size=1, alpha=0.5)
qmap('Spain',zoom=1)+
geom_point(data = users, aes(x = longitude, y = latitude),color="red",  size=1, alpha=0.5)
qmap('Australia',zoom=2)+
geom_point(data = users, aes(x = longitude, y = latitude,group=user_gender), color="red",  size=1, alpha=0.5)
)
qmap('Australia',zoom=2)+
geom_point(data = users, aes(x = longitude, y = latitude,group=user_gender), color="red",  size=1, alpha=0.5)
qmap('Australia',zoom=2)+
geom_point(data = users, aes(x = longitude, y = latitude,group=user_gender), color=c("red","green"),  size=1, alpha=0.5)
qmap('Australia',zoom=2)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('Australia',zoom=6)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('Australia',zoom=4)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('Australia',zoom=5)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
shiny::runApp()
qmap('NSW, Australia',zoom=4)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('NSW, Australia',zoom=10)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('NSW, Australia',zoom=8)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('NSW, Australia',zoom=6)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('NSW, Australia',zoom=7)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('Sydney,Australia',zoom=13)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
qmap('Sydney,Australia',zoom=10)+
geom_point(data = users, aes(x = longitude, y = latitude,colour=user_gender),   size=1, alpha=0.5)
shiny::runApp()
users<<-fetch(dbSendQuery(mydb,"select user_id,user_age,user_gender,latitude,longitude from users where User_id>1000 and archetype_user_id>0"),n=-1)
mydb <- dbConnect(MySQL(), user='root', password='pwd', dbname='rec_db', host='127.0.0.1')
users<<-fetch(dbSendQuery(mydb,"select user_id,user_age,user_gender,latitude,longitude from users where User_id>1000 and archetype_user_id>0"),n=-1)
dbDisconnect(mydb)
shiny::runApp()
mydb <- dbConnect(MySQL(), user='root', password='pwd', dbname='rec_db', host='127.0.0.1')
users<<-fetch(dbSendQuery(mydb,"select user_id,user_age,user_gender,latitude,longitude from users where User_id>1000 and archetype_user_id>0"),n=-1)
users<<-fetch(dbSendQuery(mydb,"select user_id,user_age,user_gender,latitude,longitude from users where User_id>1000 and archetype_user_id>0"),n=-1)
users$user_age<<-as.factor(users$user_age)
users<<-fetch(dbSendQuery(mydb,"select user_id,user_age,user_gender,latitude,longitude from users where User_id>1000 and archetype_user_id>0"),n=-1)
users$user_age<<-as.factor(users$user_age)
users$user_age<-as.factor(users$user_age)
dbDisconnect(mydb)
sapply(users,class)
shiny::runApp()
ggplot(users)+
geom_histogram(aes(user_age,fill=user_gender),position="dodge")
ggplot(users)+
geom_histogram(aes(user_age,fill=user_gender),position="dodge")+
#facet_grid(~user_gender)+
scale_y_continuous(labels = percent_format())+
#       scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                     labels = trans_format("log10", math_format(10^.x))) +
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
ggplot(users)+
geom_histogram(aes(x=user_age,y=..ncount..,fill=user_gender),position="dodge")+
#facet_grid(~user_gender)+
scale_y_continuous(labels = percent_format())+
#       scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                     labels = trans_format("log10", math_format(10^.x))) +
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
ggplot(users)+ #,fill=user_gender
geom_histogram(aes(x=user_age,y=..ncount..),position="dodge")+
#facet_grid(~user_gender)+
scale_y_continuous(labels = percent_format())+
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
ggplot(users)+ #,fill=user_gender
geom_bar(aes(x=user_age,y=(..count..)/sum(..count..)),position="dodge")+
#facet_grid(~user_gender)+
scale_y_continuous(labels=percent)+
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
ggplot(users)+ #,fill=user_gender
geom_bar(aes(x=user_age,y=(..count..)/sum(..count..)),position="dodge")+
#facet_grid(~user_gender)+
scale_y_continuous(labels=percent)+
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
ggplot(users)+ #,fill=user_gender
geom_bar(aes(x=user_age,y=(..count..)/sum(..count..)),position="dodge")+
facet_grid(~user_gender)+
scale_y_continuous(labels=percent)+
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
ggplot(users)+ #,fill=user_gender
geom_bar(aes(x=user_age,y=(..count..)/sum(..count..),fill=user_gender),position="dodge")+
#facet_grid(~user_gender)+
scale_y_continuous(labels=percent)+
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
ggplot(users)+ #,fill=user_gender
geom_bar(aes(x=user_age,y=(..count..)/sum(..count..),fill=user_gender),position="dodge")+
#facet_grid(~user_gender)+
scale_y_continuous(labels=percent)+ ylab("%")+xlab("Age")+
theme(text = element_text(size=10), legend.position ="top",
axis.text.x = element_text(angle = 90, vjust = 0.5,hjust = 1))
shiny::runApp()
shiny::runApp()
shiny::runApp()
mydb <- dbConnect(MySQL(), user='root', password='pwd', dbname='rec_db', host='127.0.0.1')
print("Loading archprefs DB...")
archprefs<-fetch(dbSendQuery(mydb,"select  (archetype_id-8008135800813500000) as archetype, (tag_id-1000) as tag_id, (day*24+hour) as dayhour, hour, day, activity/impressions as rating from rec_archetype_activities"),n=-1)
archprefs$archetype<-as.integer(archprefs$archetype)
archprefs$dayhour<-as.factor(archprefs$dayhour)
archprefs$tag_id<-as.integer(archprefs$tag_id)
archprefs<<-data.table(archprefs)
setkey(archprefs,tag_id)
setkey(tagtb,tag_id)
archprefs<<-merge(archprefs,tagtb)
archprefs$sub_cat_id<-NULL
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
class(archprefs)
mydb <- dbConnect(MySQL(), user='root', password='pwd', dbname='rec_db', host='127.0.0.1')
print("Loading archprefs DB...")
archprefs<-fetch(dbSendQuery(mydb,"select  (archetype_id-8008135800813500000) as archetype, (tag_id-1000) as tag_id, (day*24+hour) as dayhour, hour, day, activity/impressions as rating from rec_archetype_activities"),n=-1)
archprefs$archetype<-as.integer(archprefs$archetype)
archprefs$dayhour<-as.factor(archprefs$dayhour)
archprefs$tag_id<-as.integer(archprefs$tag_id)
archprefs<-data.table(archprefs)
print("before setkey archprefs DB...")
print(class(archprefs))
setkey(archprefs,tag_id)
print("after setkey archprefs DB...")
setkey(tagtb,tag_id)
archprefs<<-merge(archprefs,tagtb)
archprefs$sub_cat_id<-NULL
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?data.table
source('D:/Projects/vivant/henry_data_tools/memory.R')
lsos()
shiny::runApp()
shiny::runApp()
all_cons <- dbListConnections(MySQL())
for(con in all_cons)
dbDisconnect(con)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
class(tagtb)
lsos()
names(users)
sapply(users,class)
shiny::runApp()
lsos()
shiny::runApp()
rattle()
source('D:/Github projects/rattlesrc/package/R/rattle.R')
rattle()
library(rattle)
library(rattle)
rattle()
initialiseVariableViews <- function()
{
# Define the data models for the various treeviews.
model <- RGtk2::gtkListStoreNew("gchararray", "gchararray", "gchararray",
"gboolean", "gboolean", "gboolean", "gboolean",
"gboolean", "gboolean", "gchararray")
impute <- RGtk2::gtkListStoreNew("gchararray", "gchararray", "gchararray")
continuous <- RGtk2::gtkListStoreNew("gchararray", "gchararray",
"gboolean", "gboolean",
"gboolean", "gboolean", "gchararray")
categorical <- RGtk2::gtkListStoreNew("gchararray", "gchararray",
"gboolean", "gboolean", "gboolean",
"gchararray")
# View the model through the treeview in the DATA tab
treeview <- theWidget("select_treeview")
treeview$setModel(model)
impview <- theWidget("impute_treeview")
impview$setModel(impute)
catview <- theWidget("categorical_treeview")
catview$setModel(categorical)
conview <- theWidget("continuous_treeview")
conview$setModel(continuous)
## Add the NUMBER column as the row number.
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("No."),
renderer,
text= crv$COLUMN[["number"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
imp.offset <-
impview$insertColumnWithAttributes(-1,
Rtxt("No."),
renderer,
text= crv$IMPUTE[["number"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
cat.offset <-
catview$insertColumnWithAttributes(-1,
Rtxt("No."),
renderer,
text= crv$CATEGORICAL[["number"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
con.offset <-
conview$insertColumnWithAttributes(-1,
Rtxt("No."),
renderer,
text= crv$CONTINUOUS[["number"]])
## Add the VARIABLE NAME column to the views.
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Variable"),
renderer,
text = crv$COLUMN[["variable"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
imp.offset <-
impview$insertColumnWithAttributes(-1,
Rtxt("Variable"),
renderer,
text = crv$IMPUTE[["variable"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
cat.offset <-
catview$insertColumnWithAttributes(-1,
Rtxt("Variable"),
renderer,
text = crv$CATEGORICAL[["variable"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
con.offset <-
conview$insertColumnWithAttributes(-1,
Rtxt("Variable"),
renderer,
text = crv$CONTINUOUS[["variable"]])
## Add the TYPE column.
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Data Type"),
renderer,
text = crv$COLUMN[["type"]])
# Add the INPUT column.
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(radio = TRUE)
renderer$set(width = 60)
renderer$setData("column", crv$COLUMN["input"])
RGtk2::connectSignal(renderer, "toggled", item.toggled, model)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Input"),
renderer,
active = crv$COLUMN[["input"]])
## Add the TARGET column.
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(radio = TRUE)
renderer$set(width = 60)
renderer$setData("column", crv$COLUMN["target"])
RGtk2::connectSignal(renderer, "toggled", item.toggled, model)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Target"),
renderer,
active = crv$COLUMN[["target"]])
## Add the RISK column.
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(radio = TRUE)
renderer$set(width = 60)
renderer$setData("column", crv$COLUMN["risk"])
RGtk2::connectSignal(renderer, "toggled", item.toggled, model)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Risk"),
renderer,
active = crv$COLUMN[["risk"]])
## Add the IDENT column.
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(radio = TRUE)
renderer$set(width = 60)
renderer$setData("column", crv$COLUMN["ident"])
RGtk2::connectSignal(renderer, "toggled", item.toggled, model)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Ident"),
renderer,
active = crv$COLUMN[["ident"]])
## Add the IGNORE column (the Ignore check button) to the view.
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(radio = TRUE)
renderer$set(width = 60)
renderer$setData("column", crv$COLUMN["ignore"])
RGtk2::connectSignal(renderer, "toggled", item.toggled, model)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Ignore"),
renderer,
active = crv$COLUMN[["ignore"]])
## Add the WEIGHT column (the Weight check button) to the view.
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(radio = TRUE)
renderer$set(width = 60)
renderer$setData("column", crv$COLUMN["weight"])
RGtk2::connectSignal(renderer, "toggled", item.toggled, model)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Weight"),
renderer,
active = crv$COLUMN[["weight"]])
## Add the barplot and dotplot and mosplot.
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CATEGORICAL["barplot"])
RGtk2::connectSignal(renderer, "toggled", cat_toggled, categorical)
cat.offset <-
catview$insertColumnWithAttributes(-1,
Rtxt("Bar Plot"),
renderer,
active = crv$CATEGORICAL[["barplot"]])
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CATEGORICAL["dotplot"])
RGtk2::connectSignal(renderer, "toggled", cat_toggled, categorical)
cat.offset <-
catview$insertColumnWithAttributes(-1,
Rtxt("Dot Plot"),
renderer,
active = crv$CATEGORICAL[["dotplot"]])
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CATEGORICAL["mosplot"])
RGtk2::connectSignal(renderer, "toggled", cat_toggled, categorical)
cat.offset <-
catview$insertColumnWithAttributes(-1,
Rtxt("Mosaic"),
renderer,
active = crv$CATEGORICAL[["mosplot"]])
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CATEGORICAL["pairs"])
RGtk2::connectSignal(renderer, "toggled", cat_toggled, categorical)
cat.offset <-
catview$insertColumnWithAttributes(-1,
Rtxt("Pairs"),
renderer,
active = crv$CATEGORICAL[["pairs"]])
## Add the boxplot, hisplot, cumplot, benplot buttons
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CONTINUOUS["boxplot"])
RGtk2::connectSignal(renderer, "toggled", con_toggled, continuous)
con.offset <-
conview$insertColumnWithAttributes(-1,
Rtxt("Box Plot"),
renderer,
active = crv$CONTINUOUS[["boxplot"]])
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CONTINUOUS["hisplot"])
RGtk2::connectSignal(renderer, "toggled", con_toggled, continuous)
con.offset <-
conview$insertColumnWithAttributes(-1,
Rtxt("Histogram"),
renderer,
active = crv$CONTINUOUS[["hisplot"]])
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CONTINUOUS["cumplot"])
RGtk2::connectSignal(renderer, "toggled", con_toggled, continuous)
con.offset <-
conview$insertColumnWithAttributes(-1,
Rtxt("Cumulative"),
renderer,
active = crv$CONTINUOUS[["cumplot"]])
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CONTINUOUS["benplot"])
RGtk2::connectSignal(renderer, "toggled", con_toggled, continuous)
con.offset <-
conview$insertColumnWithAttributes(-1,
Rtxt("Benford"),
renderer,
active = crv$CONTINUOUS[["benplot"]])
renderer <- RGtk2::gtkCellRendererToggleNew()
renderer$set(xalign = 0.0)
renderer$set(width = 60)
renderer$setData("column", crv$CONTINUOUS["pairs"])
RGtk2::connectSignal(renderer, "toggled", con_toggled, continuous)
con.offset <-
conview$insertColumnWithAttributes(-1,
Rtxt("Pairs"),
renderer,
active = crv$CONTINUOUS[["pairs"]])
## Add the COMMENT column.
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
col.offset <-
treeview$insertColumnWithAttributes(-1,
Rtxt("Comment"),
renderer,
text = crv$COLUMN[["comment"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
imp.offset <-
impview$insertColumnWithAttributes(-1,
Rtxt("Data Type and Number Missing"),
renderer,
text = crv$IMPUTE[["comment"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
cat.offset <-
catview$insertColumnWithAttributes(-1,
Rtxt("Levels"),
renderer,
text = crv$CATEGORICAL[["comment"]])
renderer <- RGtk2::gtkCellRendererTextNew()
renderer$set(xalign = 0.0)
con.offset <-
conview$insertColumnWithAttributes(-1,
Rtxt("Min; Median/Mean; Max"),
renderer,
text = crv$CONTINUOUS[["comment"]])
## Allow multiple selections.
treeview$getSelection()$setMode("multiple")
impview$getSelection()$setMode("multiple")
catview$getSelection()$setMode("multiple")
conview$getSelection()$setMode("multiple")
}
rattle()
source('D:/Github projects/rattlesrc/package/R/rattle.R')
rattle()
setwd("D:/Github projects/rattlesrc/package/inst")
source('D:/Github projects/rattlesrc/package/R/sourceAll.R')
source('D:/Github projects/rattlesrc/package/R/sourceAll.R')
source("../R/acquireAuditData.R")
source('D:/Github projects/rattlesrc/package/R/sourceAll.R')
source('D:/Github projects/rattlesrc/package/R/sourceAll.R')
rattle()
debugSource('D:/Github projects/rattlesrc/package/R/rattle.R')
debugSource('D:/Github projects/rattlesrc/package/R/rattle.R')
crv$rattleGUI <- gladeXMLNew("./etc/rattle.glade",
root="rattle_window", domain="R-rattle")
source('D:/Github projects/rattlesrc/package/R/rattle.R')
rattle()
getRversion()
library(libglade)
